["^ ","~:output",["^ ","~:js","goog.provide('ajax.ring');\ngoog.require('cljs.core');\ngoog.require('ajax.interceptors');\ngoog.require('ajax.protocols');\ngoog.require('ajax.formats');\najax.ring.make_ring_read = (function ajax$ring$make_ring_read(body_read){\nreturn (function ajax$ring$make_ring_read_$_ring_read(response){\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"status\",\"status\",-1997798413),ajax.protocols._status(response),new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),ajax.protocols._get_all_headers(response),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),(body_read.cljs$core$IFn$_invoke$arity$1 ? body_read.cljs$core$IFn$_invoke$arity$1(response) : body_read.call(null,response))], null);\n});\n});\n/**\n * Returns a Ring-compatible response map.\n * \n * Optionally can be passed a :format option. This should be another\n * response-format map. If format is provided it will be used to\n * specify the content-type, and the read method will be used to\n * populate the :body key in the response map.\n */\najax.ring.ring_response_format = (function ajax$ring$ring_response_format(var_args){\nvar G__33286 = arguments.length;\nswitch (G__33286) {\ncase 0:\nreturn ajax.ring.ring_response_format.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn ajax.ring.ring_response_format.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\najax.ring.ring_response_format.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn ajax.ring.ring_response_format.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"format\",\"format\",-1306924766),ajax.formats.raw_response_format.cljs$core$IFn$_invoke$arity$0()], null));\n});\n\najax.ring.ring_response_format.cljs$core$IFn$_invoke$arity$1 = (function (p__33290){\nvar map__33291 = p__33290;\nvar map__33291__$1 = (((((!((map__33291 == null))))?(((((map__33291.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__33291.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__33291):map__33291);\nvar map__33292 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__33291__$1,new cljs.core.Keyword(null,\"format\",\"format\",-1306924766));\nvar map__33292__$1 = (((((!((map__33292 == null))))?(((((map__33292.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__33292.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__33292):map__33292);\nvar read = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__33292__$1,new cljs.core.Keyword(null,\"read\",\"read\",1140058661));\nvar description = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__33292__$1,new cljs.core.Keyword(null,\"description\",\"description\",-1428560544));\nvar content_type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__33292__$1,new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634));\nreturn ajax.interceptors.map__GT_ResponseFormat(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"read\",\"read\",1140058661),ajax.ring.make_ring_read(read),new cljs.core.Keyword(null,\"description\",\"description\",-1428560544),[\"ring/\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(description)].join(''),new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634),content_type], null));\n});\n\najax.ring.ring_response_format.cljs$lang$maxFixedArity = 1;\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","ajax/ring.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",14],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$shadow.js.shim.module$react","~$create-react-class","~$shadow.js.shim.module$create_react_class","~$react-dom","~$shadow.js.shim.module$react_dom"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$ajax.ring","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$ajax.interceptors","^M","~$ajax.protocols","^N","~$ajax.formats","^O","~$f","^O","~$cljs.core","^P","~$goog","^Q"],"~:seen",["^F",["~:require"]],"~:uses",["^ ","~$map->ResponseFormat","^M","~$-status","^N","~$-get-all-headers","^N","~$-body","^N"],"~:require-macros",["^ ","^P","^P"],"~:form",["~#list",["~$ns","^H",["^[",["^S",["^M","~:refer",["^U"]],["^N","^11",["^V","^W","^X"]],["^O","~:as","~$f"]]]]],"~:flags",["^ ","^S",["^F",[]]],"~:js-deps",["^ "],"~:deps",["^Q","^P","^M","^N","^O"]],"^J","^H","~:resource-id",["~:shadow.build.classpath/resource","ajax/ring.cljc"],"~:compiled-at",1562950762364,"~:resource-name","ajax/ring.cljc","~:warnings",[],"~:source","(ns ajax.ring\n  (:require [ajax.interceptors :refer [map->ResponseFormat]]\n            [ajax.protocols :refer [-status -get-all-headers -body]]\n            [ajax.formats :as f]))\n\n(defn make-ring-read [body-read]\n  (fn ring-read [response]\n    {:status (-status response)\n     :headers (-get-all-headers response)\n     :body (body-read response)}))\n\n(defn ring-response-format\n  \"Returns a Ring-compatible response map.\n\n   Optionally can be passed a :format option. This should be another\n   response-format map. If format is provided it will be used to\n   specify the content-type, and the read method will be used to\n   populate the :body key in the response map.\"\n  ([] (ring-response-format {:format (f/raw-response-format)}))\n  ([{{:keys [read description content-type]} :format}]\n   (map->ResponseFormat {:read (make-ring-read read)\n                         :description (str \"ring/\" description)\n                         :content-type content-type})))\n","~:reader-features",["^F",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";;;;;AAKA,AAAA,AAAMA,AAAgBC;AAAtB,AACE,AAAeC;AAAf,AAAA,AAAA,AAAA,AAAA,AACW,AAACC,AAAQD,AACR,AAACE,AAAiBF,AACrB,AAACD,AAAAA,AAAAA,AAAUC,AAAAA;;;AAEtB,AAAA;;;;;;;;AAAA,AAAAG,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD;AAAN,AAOM,AAAA,AAAA,AAACS,AAA8B,AAACC;;;AAPtC,AAAA,AAAA,AAAAR,AAAMF;AAAN,AAAA,AAAAG,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAI,AAAA,AAAAC,AAAAL,AAAA;AAAAI,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAH,AAAA,AAAAG,AAAA,AAAA,AAAA,AAAA,AAAAF,AAAAC,AAAAC,AAAAA;AAAA,AAAAC,AAAAD,AAAA,AAQaI;AARb,AAAAH,AAAAD,AAAA,AAQkBK;AARlB,AAAAJ,AAAAD,AAAA,AAQ8BM;AAR9B,AASG,AAAA,AAAA,AAAA,AAAA,AAACC,AAA2B,AAACrB,AAAekB,AACT,AAAA,AAAaC,AACZC;;;AAXvC,AAAA,AAAA,AAAMb;;AAAN","names",["ajax.ring/make-ring-read","body-read","response","ajax.protocols/-status","ajax.protocols/-get-all-headers","var_args","G__33286","ajax.ring/ring-response-format","js/Error","p__33290","map__33291","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","map__33292","cljs.core.get.cljs$core$IFn$_invoke$arity$2","ajax.ring.ring_response_format.cljs$core$IFn$_invoke$arity$1","ajax.formats.raw_response_format.cljs$core$IFn$_invoke$arity$0","read","description","content-type","ajax.interceptors/map->ResponseFormat"]]],"~:cache-keys",["~#cmap",[["~:macro","^P"],[1562948133000],["^17","goog/math/math.js"],[1562948135000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^F",[]],"~:deps-syms",["^Q","~$goog.array","~$goog.asserts"]]],["^17","goog/array/array.js"],[1562948135000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^Q","^1J"]]],["^17","goog/debug/error.js"],[1562948135000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^Q"]]],["^17","ajax/interceptors.cljc"],[1562948138000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^Q","^P","~$clojure.string","~$ajax.util","~$ajax.url","^N"]]],["^17","goog/dom/nodetype.js"],[1562948135000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^Q"]]],["^17","ajax/protocols.cljc"],[1562948138000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^Q","^P"]]],["^17","ajax/url.cljc"],[1562948138000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^Q","^P","^1K","^1L"]]],["^17","goog/object/object.js"],[1562948135000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^Q"]]],"~:SHADOW-TIMESTAMP",[1562948138000,1562948133000],["^17","goog/math/long.js"],[1562948135000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^Q","^1J","~$goog.reflect"]]],["^17","goog/string/internal.js"],[1562948135000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^Q"]]],["^17","goog/functions/functions.js"],[1562948135000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^Q"]]],["^17","goog/structs/map.js"],[1562948135000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^Q","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^17","ajax/util.cljc"],[1562948138000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^Q","^P","^N"]]],["^17","ajax/ring.cljc"],[1562948138000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^Q","^P","^M","^N","^O"]]],["^17","goog/asserts/asserts.js"],[1562948135000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^Q","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^17","goog/uri/uri.js"],[1562948135000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^Q","^1I","^1J","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^17","goog/base.js"],[1562948135000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",[]]],["^17","goog/structs/structs.js"],[1562948135000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^Q","^1I","~$goog.object"]]],["^1D","~$ajax.macros"],[1562948138000],["^17","clojure/string.cljs"],[1562948133000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^Q","^P","^1T","~$goog.string.StringBuffer"]]],["^17","goog/string/string.js"],[1562948135000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^Q","~$goog.string.internal"]]],["^17","ajax/formats.cljc"],[1562948138000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^Q","^P","^M","^1L","^N"]]],["^17","goog/reflect/reflect.js"],[1562948135000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^Q"]]],["^17","goog/string/stringbuffer.js"],[1562948135000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^Q"]]],["^17","goog/iter/iter.js"],[1562948135000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^Q","^1I","^1J","~$goog.functions","~$goog.math"]]],["^17","cljs/core.cljs"],[1562948133000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["~$goog.math.Long","~$goog.math.Integer","^1T","^1Z","^1I","~$goog.Uri","^20"]]],["^17","goog/math/integer.js"],[1562948135000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^Q"]]],["^17","goog/uri/utils.js"],[1562948135000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^Q","^1I","^1J","^1T"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","ajax/ring.cljc","^7",1,"^8",5,"^9",1,"^:",14],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C"],"^D",null,"^E",["^F",[]],"^G","^H","^K",null,"^L",["^ ","^M","^M","^N","^N","^O","^O","~$f","^O","^P","^P","^Q","^Q"],"^R",["^F",["^S"]],"~:shadow/js-access-global",["^F",["Error"]],"^T",["^ ","^U","^M","^V","^N","^W","^N","^X","^N"],"~:defs",["^ ","~$make-ring-read",["^ ","~:protocol-inline",null,"^5",["^ ","^6","ajax/ring.cljc","^7",6,"^8",7,"^9",6,"^:",21,"~:arglists",["^[",["~$quote",["^[",[["~$body-read"]]]]]],"^G","~$ajax.ring/make-ring-read","^6","ajax/ring.cljc","^:",21,"~:method-params",["^[",[["^2>"]]],"~:protocol-impl",null,"~:arglists-meta",["^[",[null,null]],"^8",1,"~:variadic?",false,"^7",6,"~:ret-tag","~$function","^9",6,"~:max-fixed-arity",1,"~:fn-var",true,"^2<",["^[",["^2=",["^[",[["^2>"]]]]]],"~$ring-response-format",["^ ","^2;",null,"^5",["^ ","^6","ajax/ring.cljc","^7",12,"^8",7,"^9",12,"^:",27,"^2<",["^[",["^2=",["^[",[[],[["^1C",[["^ ","~:keys",["~$read","~$description","~$content-type"]],"~:format"]]]]]]],"~:doc","Returns a Ring-compatible response map.\n\n   Optionally can be passed a :format option. This should be another\n   response-format map. If format is provided it will be used to\n   specify the content-type, and the read method will be used to\n   populate the :body key in the response map.","~:top-fn",["^ ","^2C",false,"~:fixed-arity",1,"^2F",1,"^2@",["^[",[[],[["^1C",[["^ ","^2I",["^2J","^2K","^2L"]],"^2M"]]]]],"^2<",["^[",[[],[["^1C",[["^ ","^2I",["^2J","^2K","^2L"]],"^2M"]]]]],"^2B",["^[",[null,null]]]],"^G","~$ajax.ring/ring-response-format","^6","ajax/ring.cljc","^:",27,"^2O",["^ ","^2C",false,"^2P",1,"^2F",1,"^2@",["^[",[[],[["^1C",[["^ ","^2I",["^2J","^2K","^2L"]],"^2M"]]]]],"^2<",["^[",[[],[["^1C",[["^ ","^2I",["^2J","^2K","^2L"]],"^2M"]]]]],"^2B",["^[",[null,null]]],"^2@",["^[",[[],[["^1C",[["^ ","^2I",["^2J","^2K","^2L"]],"^2M"]]]]],"^2A",null,"^2P",1,"^2B",["^[",[null,null]],"^8",1,"^2C",false,"~:methods",[["^ ","^2P",0,"^2C",false,"~:tag","~$any"],["^ ","^2P",1,"^2C",false,"^2S","~$ajax.interceptors/ResponseFormat"]],"^7",12,"^9",12,"^2F",1,"^2G",true,"^2<",["^[",[[],[["^1C",[["^ ","^2I",["^2J","^2K","^2L"]],"^2M"]]]]],"^2N","Returns a Ring-compatible response map.\n\n   Optionally can be passed a :format option. This should be another\n   response-format map. If format is provided it will be used to\n   specify the content-type, and the read method will be used to\n   populate the :body key in the response map."]],"^Y",["^ ","^P","^P"],"~:cljs.analyzer/constants",["^ ","^R",["^F",["~:description","^2M","~:read","~:headers","~:status","~:content-type","~:body"]],"~:order",["^2Z","^2Y","^30","^2M","^2X","^2W","^2["]],"^13",["^ ","^S",["^F",[]]],"^14",["^ "],"^15",["^Q","^P","^M","^N","^O"]],"^J","^H","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1C",[["^34","~:static-fns"],true,["^34","~:elide-asserts"],false,["^34","~:optimize-constants"],null,["^34","^1:"],null,["^34","~:external-config"],null,["^34","~:tooling-config"],null,["^34","~:emit-constants"],null,["^34","~:load-tests"],null,["^34","~:infer-externs"],true,["^34","^1<"],null,["~:js-options","~:js-provider"],"^S",["~:mode"],"~:dev",["^34","~:fn-invoke-direct"],null,["^34","~:source-map"],"/dev/null"]]]